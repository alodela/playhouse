scalar JSON
scalar JSONObject

enum Lifecycle {
  EXPERIMENTAL
  PRODUCTION
  DEPRECATED
}

union Ownable = API | Component | Domain | Resource | System | Template
union Dependency = Component | Resource
union Owner = User | Group

interface Entity @extend(type: "Node") {
  name: String! @field(at: "metadata.name")
  namespace: String @field(at: "metadata.namespace")
  title: String @field(at: "metadata.title")
  description: String @field(at: "metadata.description")
  tags: [String] @field(at: "metadata.tags")
  links: [EntityLink] @field(at: "metadata.links")
}

type EntityLink {
  url: String!
  title: String
  icon: String
}

type Location @extend(type: "Entity") {
  type: String @field(at: "spec.type")
  target: String @field(at: "spec.target")
  targets: [String] @field(at: "spec.targets")
}

type API @extend(type: "Entity") {
  lifecycle: Lifecycle! @field(at: "spec.lifecycle")
  owner: Owner! @relation(name: "ownedBy")
  definition: String! @field(at: "spec.definition")
  system: System @relation(name: "partOf")
  consumers: Connection @relation(name: "apiConsumedBy", type: "Component")
  providers: Connection @relation(name: "apiProvidedBy", type: "Component")
}

type Component @extend(type: "Entity") {
  lifecycle: Lifecycle! @field(at: "spec.lifecycle")
  owner: Owner! @relation(name: "ownedBy")
  system: System @relation(name: "partOf", kind: "system")
  component: Component @relation(name: "partOf", kind: "component")
  subComponents: Connection @relation(name: "hasPart", type: "Component")
  providesApi: Connection @relation(type: "API")
  consumesApi: Connection @relation(type: "API")
  dependencies: Connection @relation(name: "dependsOn", type: "Dependency")
}

type Domain @extend(type: "Entity") {
  owner: Owner! @relation(name: "ownedBy")
  systems: Connection @relation(name: "hasPart", type: "System")
}

type Resource @extend(type: "Entity") {
  owner: Owner! @relation(name: "ownedBy")
  dependencies: Connection @relation(name: "dependsOn", type: "Dependency")
  dependents: Connection @relation(name: "dependencyOf", type: "Dependency")
  system: System @relation(name: "partOf")
}

type System @extend(type: "Entity") {
  owner: Owner! @relation(name: "ownedBy")
  domain: Domain @relation(name: "partOf")
  components: Connection @relation(name: "hasPart", type: "Component", kind: "component")
  resources: Connection @relation(name: "hasPart", type: "Resource", kind: "resource")
}

type Step {
  id: String
  name: String
  action: String!
  input: JSONObject
  if: JSON
}

type Template @extend(type: "Entity") {
  parameters: JSONObject @field(at: "spec.parameters")
  steps: [Step]! @field(at: "spec.steps")
  output: JSONObject @field(at: "spec.output")
  owner: Owner @relation(name: "ownedBy")
}

type Group @extend(type: "Entity") {
  displayName: String @field(at: "spec.profile.displayName")
  email: String @field(at: "spec.profile.email")
  picture: String @field(at: "spec.profile.picture")
  parent: Group @relation(name: "childOf")
  children: Connection @relation(name: "parentOf", type: "Group")
  members: Connection @relation(name: "hasMember", type: "User")
  ownerOf: Connection @relation(type: "Ownable")
}

type User @extend(type: "Entity") {
  displayName: String @field(at: "spec.profile.displayName")
  email: String @field(at: "spec.profile.email")
  picture: String @field(at: "spec.profile.picture")
  memberOf: Connection @relation(type: "Group")
  ownerOf: Connection @relation(type: "Ownable")
}

extend type Query {
  entity(kind: String!, name: String!, namespace: String): Entity
}
