apiVersion: apps/v1
kind: Deployment
metadata:
  name: backstage
spec:
  replicas: 2
  progressDeadlineSeconds: 90
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: backstage
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/templates/configmap.yaml") . | sha256sum }}
        checksum/secrets: {{ include (print $.Template.BasePath "/templates/secrets.yaml") . | sha256sum }}
      labels:
        app: backstage
    spec:
      containers:
      - name: backstage
        image: {{ required "You must provide a Backstage image" .Values.backstageImage }}
        command: ["node", "packages/backend", "--config", "app-config.yaml", "--config", "app-config.production.yaml"]
        ports:
          - name: http
            containerPort: {{ .Values.backstagePort | default 7007 }}
        livenessProbe:
          httpGet:
            path: /api/healthcheck
            port: http
        startupProbe:
          httpGet:
            path: /api/healthcheck
            port: http
          periodSeconds: 4
          failureThreshold: 15
        volumeMounts:
          - mountPath: "/app/credentials"
            name: "backstage-app-credentials"
            readOnly: true
        envFrom:
          - configMapRef:
              name: backstage-configmap
          - secretRef:
              name: postgres-secrets
          - secretRef:
              name: backstage-secrets
      volumes:
        - name: "backstage-app-credentials"
          secret:
            secretName: backstage-credentials